lab_size=2.5,
method="circle",
colors = c("maroon3", "lavender",
"darkturquoise"))
ggtheme=theme_gray()
dev.off()
ggcorrplot(cor1_df, hc.order = TRUE,
type="lower",
lab=TRUE,digits = 3,
lab_size=2.5,
method="circle",
colors = c("maroon3", "lavender",
"darkturquoise"))
ggtheme=theme_gray()
ggcorrplot(cor1_df, hc.order = TRUE,
type="lower",
lab=TRUE,digits = 3,
lab_size=2.5,
method="circle",
colors = c("maroon3", "lavender",
"darkturquoise"))+
theme_gray()
ggcorrplot(cor1_df, hc.order = TRUE,
type="lower",
lab=TRUE,digits = 3,
lab_size=2.5,
method="circle",
colors = c("maroon3", "lavender",
"darkturquoise"))
ggcorrplot(cor1_df, hc.order = TRUE,
type="lower",
lab=TRUE,digits = 3,
lab_size=2.5,
method="circle",
colors = c("red", "lavender",
"blue"))
ggcorrplot(cor1_df, hc.order = TRUE,
type="lower",
lab=TRUE,digits = 3,
lab_size=2.5,
method="circle",
colors = c("orange", "lavender",
"blue"))
colors = c(#6D9EC1", "white", "#E46726"))
ggcorrplot(cor1_df, hc.order = TRUE,
type="lower",
lab=TRUE,digits = 3,
lab_size=2.5,
method="circle",
colors = c("#6D9EC1", "white", "#E46726"))
##Checking Normality
library(moments)
##Checking Normality
library(moments)
hist(tibble_Burn_weather$GIS_ACRES)
skewness(tibble_Burn_weather$GIS_ACRES, na.rm = TRUE)
kurtosis(tibble_Burn_weather$GIS_ACRES, na.rm = TRUE)
climate_model2 = glm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather, family= "Gamma")
summary(climate_model2)
climate_model2 = glm(GIS_ACRES ~ Tot_Precip_mm + Avg_Air_T_C,data = tibble_Burn_weather, family= "Gamma")
#linear regression of precipitation, evapotranspiration, temperature,
#wind speed, humidity, solar
climate_model = lm(data = tibble_Burn_weather, GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms)
summary(climate_model)
##checking the strong correlations:
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Air_T_C,
method = "pearson", use="na.or.complete")
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Sol_Rad_Wsqm,
method = "pearson", use="na.or.complete")
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Rel_Hum,
method = "pearson", use="na.or.complete")
#filter summer months and run regression
summer = filter(tibble_Burn_weather, month %in% c(3:10))
summer_model = lm(data = summer, GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms)
summary(summer_model)
cor(summer$GIS_ACRES, summer$Avg_Air_T_C, method = "pearson", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Wind_S_ms, method = "pearson", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Rel_Hum, method = "pearson", use="na.or.complete")
#filter fall month and run regression
fall = filter(tibble_Burn_weather, month %in% c(11,12,1,2))
fall_model = lm(data = fall, GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms)
summary(fall_model)
cor(fall$GIS_ACRES, fall$Total_ETo_mm , method = "pearson", use="na.or.complete")
cor(fall$GIS_ACRES, fall$Avg_Sol_Rad_Wsqm, method = "pearson", use="na.or.complete")
##writing for ArcGis
shapefile = Burn_centroid
shapefile = shapefile[,-15]
shapefile = shapefile %>%
rename(AMATC=Avg_Min_Air_Temp_C, AMAATC=Avg_Max_Air_T_C)
st_write(shapefile, "sep_coords13.shp")
#load the california counties data
cal_county = st_read("Raw_Layers\\California_County_Boundaries\\cnty19_1.shp")
cal_crs = st_transform(cal_county, 4269)
#finding the fires centroid and plotting the results
Burn_centroid = st_centroid(Burn_Weather_join)
ggplot()+
geom_sf(data =Burn_centroid, color = 'red')+
labs(title = "Centroid of fires", x="lon", y="lat")+
theme(plot.title = element_text(hjust=0.5))
#finding the lat and lon attributes of the centroid for the ggplot plotting
sep_coords <- Burn_centroid %>%
mutate(lon = sf::st_coordinates(.)[,1],
lat = sf::st_coordinates(.)[,2])
#plotting the density of fires
ggplot() +
geom_sf(data =sep_coords, color = 'white', alpha = 0.2)+
stat_density_2d(data = sep_coords,
mapping = aes(x = lon,
y = lat,
fill = stat(density)),
geom = 'tile',
contour = FALSE,
alpha = 0.8) +
scale_fill_viridis(option = "A", direction = -1) +
geom_sf(data = cal_crs, fill = NA) +
geom_sf_text(data = cal_crs, aes(label= COUNTY_ABB), colour = 'green4', size = 2.5)+
labs(title = "Density of fires")+
theme(plot.title = element_text(hjust=0.5))
sep_coords$Desc
#decide which fires are small\big
Burn_size = tibble_Burn_weather %>%
filter(!is.na(GIS_ACRES)) %>%
mutate(godel = case_when(GIS_ACRES <= 500 ~ "Small (<=500)",
GIS_ACRES > 500 ~ "Big (>500)"))
#make a plot of big and small fires by month as accumulation
#of all years
Burn_size %>%
group_by(month,godel)%>%
count() %>%
ggplot(aes(x= as.factor(month)))+
geom_col(aes(fill = as.factor(godel), y=n), position = "dodge")+
scale_fill_brewer(palette="Set2")+
labs(title = "Fire Size distribution by Months (Acres Burned)",
subtitle = "During 1983-2020",
y="Number of Fires", x="Month",fill="Fire size (Acre)")+
theme_light()+
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5))
#prepering the data for ploting per human VS natural cause
human = sep_coords %>%
filter(Desc %in% c("Aircraft","Arson","Campfire", "Debris",
"Equipment Use", "Escaped Prescribed Burn",
"Firefighter Trainning","Illigal Alien Campfire",
"Non-Firefighter Training", "Playing with Fire",
"Power Line", "Railroad", "Smoking",
"Structure", "Vehicle"))
natural = sep_coords %>%
filter(Desc == "Lightning" )
#plotting the density of fires per human\natural cause
ggplot() +
geom_sf(data =human, color = 'white', alpha = 0.2)+
stat_density_2d(data = human,
mapping = aes(x = lon,
y = lat,
fill = stat(density)),
geom = 'tile',
contour = FALSE,
alpha = 0.8) +
scale_fill_viridis(option = "A", direction = -1) +
geom_sf(data = cal_crs, fill = NA) +
geom_sf_text(data = cal_crs, aes(label= COUNTY_ABB), colour = 'green4', size = 2.5)+
labs(title = "Density of fires by human cause")+
theme(plot.title = element_text(hjust=0.5))
ggplot() +
geom_sf(data =natural, color = 'white', alpha = 0.2)+
stat_density_2d(data = natural,
mapping = aes(x = lon,
y = lat,
fill = stat(density)),
geom = 'tile',
contour = FALSE,
alpha = 0.8) +
scale_fill_viridis(option = "A", direction = -1) +
geom_sf(data = cal_crs, fill = NA) +
geom_sf_text(data = cal_crs, aes(label= COUNTY_ABB), colour = 'green4', size = 2.5)+
labs(title = "Density of fires by natural cause")+
theme(plot.title = element_text(hjust=0.5))
hist(natural)
hist(natural)
hist(human)
par(mar=c(1,1,1,1))
hist(natural)
hist(human)
hist(natural$GIS_ACRES)
hist(human$GIS_ACRES)
summary(climate_model2)
climate_model2 = lm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather)
summary(climate_model2)
climate_model2 = lm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather)
summary(climate_model2)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma")
summary(climate_model2)
summary(climate_model2)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma")
climate_model3 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma")
climate_model3 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", na.rm = TRUE)
climate_model3 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Rel_Hum ,data = tibble_Burn_weather, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=c(0.5,0.5))
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=c(0,0.5))
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=c(0,1))
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=c(12,15))
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=1
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=1)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=0)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=c(0,15))
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather, family= "Gamma", start=c(0,1))
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family= "Gamma", start=c(0,1))
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family= "Gamma")
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE) %>%
filter(Avg_Air_T_C, na.rm=TRUE)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE) %>%
is.na(tibble_Burn_weather1$Avg_Air_T_C)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE) %>%
na.omit(tibble_Burn_weather1)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Rel_Hum ,data = tibble_Burn_weather1, family= "Gamma")
summary(climate_model2)
climate_model2 = glm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family=Gamma(link=log))
climate_model3 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family=Gamma(link=log))
summary(climate_model3)
climate_model2 = glm(GIS_ACRES ~ Tot_Precip_mm ,data = tibble_Burn_weather1, family=Gamma(link=log))
climate_model3 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family=Gamma(link=log))
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather1,family=Gamma(link=log))
climate_model2 = glm(GIS_ACRES ~ Avg_Rel_Hum ,data = tibble_Burn_weather1, family=Gamma(link=log))
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm,
family = Gamma(link = log), data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm,
family = Gamma(link = log), data = tibble_Burn_weather)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm,
family = Gamma, data = tibble_Burn_weather1)
(link = log)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm,
family = Gamma(link = log), data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = log),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = log),
data = tibble_Burn_weather)
library(flexplot)
install.packages("flexplot")
library(flexplot)
require(flexplot)
install.packages("flexplot")
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE) %>%
na.omit(tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE) %>%
na.omit(tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm= TRUE) %>%
na.omit(tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather
na.omit(tibble_Burn_weather1)
tibble_Burn_weather1 = na.omit(tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
summary(climate_model4)
tibble_Burn_weather1 = tibble_Burn_weather1 %>%
filter(GIS_ACRES >0, na.rm=TRUE)
tibble_Burn_weather1 = na.omit(tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm=TRUE)
tibble_Burn_weather1 = na.omit(tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = factor(GIS_ACRES) ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm=TRUE) %>%
filter(Avg_Air_T_C >0 , na.rm =TRUE)
tibble_Burn_weather1 = na.omit(tibble_Burn_weather1)
tibble_Burn_weather1 = tibble_Burn_weather %>%
filter(GIS_ACRES >0, na.rm=TRUE) %>%
filter(Avg_Air_T_C >0 , na.rm =TRUE) %>%
filter(Avg_Wind_S_ms >0, na.rm = TRUE) %>%
filter(Avg_Rel_Hum >0 , na.rm =TRUE) %>%
filter(Total_ETo_mm >0 , na.rm =TRUE) %>%
filter(Avg_Sol_Rad_Wsqm >0 , na.rm =TRUE) %>%
filter(Tot_Precip_mm >0 , na.rm =TRUE)
tibble_Burn_weather1 = na.omit(tibble_Burn_weather1)
climate_model4 = glm(formula = factor(GIS_ACRES) ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = int(GIS_ACRES) ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
tibble_Burn_weather1
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms
, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms +
Avg_Rel_Hum + Total_ETo_mm + Avg_Sol_Rad_Wsqm +
Tot_Precip_mm, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C , family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C + Avg_Wind_S_ms, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Avg_Air_T_C, family = Gamma(link = "log"),
data = tibble_Burn_weather1)
summary(climate_model4)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, Gamma(link = "log"))
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Rel_Hum ,data = tibble_Burn_weather1, family= "Gamma")
climate_model2 = glm(GIS_ACRES ~ Avg_Rel_Hum ,data = tibble_Burn_weather1, Gamma(link = "log"))
climate_model2 = glm(GIS_ACRES ~ Avg_Wind_S_ms ,data = tibble_Burn_weather1,Gamma(link = "log"))
climate_model2 = glm(GIS_ACRES ~ Avg_Rel_Hum ,data = tibble_Burn_weather1, family= "Gamma")
skewness(tibble_Burn_weather$GIS_ACRES, na.rm = TRUE)
kurtosis(tibble_Burn_weather$GIS_ACRES, na.rm = TRUE)
hist(tibble_Burn_weather$GIS_ACRES)
##Checking Normality
par(mar=c(5.1, 4.1, 4.1, 2.1)
hist(tibble_Burn_weather$GIS_ACRES)
##Checking Normality
par(mar=c(5.1, 4.1, 4.1, 2.1))
hist(tibble_Burn_weather$GIS_ACRES)
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Air_T_C,
method = "kendall", use="na.or.complete")
##checking the strong correlations:
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Air_T_C,
method = "pearson", use="na.or.complete")
##checking the strong correlations:
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Air_T_C,
method = "kendall", use="na.or.complete")
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Sol_Rad_Wsqm,
method = "pearson", use="na.or.complete")
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Sol_Rad_Wsqm,
method = "kendall", use="na.or.complete")
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Rel_Hum,
method = "pearson", use="na.or.complete")
cor(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Avg_Rel_Hum,
method = "kendall", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Air_T_C, method = "pearson", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Air_T_C, method = "kendall", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Wind_S_ms, method = "pearson", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Wind_S_ms, method = "kendall", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Rel_Hum, method = "pearson", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Rel_Hum, method = "kendall", use="na.or.complete")
cor(fall$GIS_ACRES, fall$Total_ETo_mm , method = "pearson", use="na.or.complete")
cor(fall$GIS_ACRES, fall$Avg_Sol_Rad_Wsqm, method = "pearson", use="na.or.complete")
cor(fall$GIS_ACRES, fall$Total_ETo_mm , method = "kendall", use="na.or.complete")
cor(fall$GIS_ACRES, fall$Avg_Sol_Rad_Wsqm, method = "kendall", use="na.or.complete")
#filter summer months and run regression
summer = filter(tibble_Burn_weather, month %in% c(5:10))
summer_model = lm(data = summer, GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms)
summary(summer_model)
cor(summer$GIS_ACRES, summer$Avg_Air_T_C, method = "kendall", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Wind_S_ms, method = "kendall", use="na.or.complete")
cor(summer$GIS_ACRES, summer$Avg_Rel_Hum, method = "kendall", use="na.or.complete")
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "inverse"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = poisson(link = "inverse"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = poisson(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = "poisson",
data = tibble_Burn_weather1)
summary(climate_model4)
help(family)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "identity"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(),
data = tibble_Burn_weather)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "inverse"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "log"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "identity"),
data = tibble_Burn_weather1)
climate_model2 = glm(GIS_ACRES ~ Avg_Air_T_C ,data = tibble_Burn_weather1, Gamma(link = "log"))
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "logit"),
data = tibble_Burn_weather1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "logit"),
data = tibble_Burn_weather1)
identity
View(cor1)
climate_model4 = glm(formula = GIS_ACRES ~ Tot_Precip_mm+
Total_ETo_mm + Avg_Sol_Rad_Wsqm + Avg_Air_T_C +
Avg_Rel_Hum + Avg_Wind_S_ms,
family = Gamma(link = "identity"),
data = tibble_Burn_weather1)
chisq.test(human$GIS_ACRES, natural$GIS_ACRES)
chisq.test(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$Desc)
chisq.test(tibble_Burn_weather$GIS_ACRES, tibble_Burn_weather$CAUSE)
hum_nat = tibble_Burn_weather %>%
mutate(binary = case_when(Desc == "Lightning"~ 1, TRUE ~ 0))
View(hum_nat)
chisq.test(hum_nat$GIS_ACRES, hum_nat$binary)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Avg_Air_T_C)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Total_ETo_mm)
hum_nat = tibble_Burn_weather %>%
filter(Desc %in% c("Aircraft","Arson","Campfire", "Debris",
"Equipment Use", "Escaped Prescribed Burn",
"Firefighter Trainning","Illigal Alien Campfire",
"Non-Firefighter Training", "Playing with Fire",
"Power Line", "Railroad", "Smoking",
"Structure", "Vehicle", "Lightning")) %>%
mutate(binary = case_when(Desc == "Lightning"~ 1, TRUE ~ 0))
chisq.test(hum_nat$GIS_ACRES, hum_nat$binary)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Avg_Air_T_C)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Total_ETo_mm)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Tot_Precip_mm)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Avg_Wind_S_ms)
chisq.test(hum_nat$GIS_ACRES, hum_nat$Avg_Rel_Hum)
